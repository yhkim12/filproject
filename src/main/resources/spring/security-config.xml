<?xml version="1.0" encoding="UTF-8"?> 
<beans:beans xmlns="http://www.springframework.org/schema/security" 
			 xmlns:beans="http://www.springframework.org/schema/beans" 
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			 xmlns:security="http://www.springframework.org/schema/security"
			 xmlns:context="http://www.springframework.org/schema/context" 
			 xsi:schemaLocation="http://www.springframework.org/schema/security 
			 					http://www.springframework.org/schema/security/spring-security.xsd
			 					http://www.springframework.org/schema/beans 
								http://www.springframework.org/schema/beans/spring-beans.xsd 
								http://www.springframework.org/schema/security 
								http://www.springframework.org/schema/security/spring-security.xsd
								http://www.springframework.org/schema/context 
								http://www.springframework.org/schema/context/spring-context.xsd"> 

	<context:annotation-config></context:annotation-config>
	
	<http pattern="/admin/**" auto-config="true" use-expressions="true"> 
	
		<security:csrf disabled="true" />
		<!-- <security:intercept-url pattern="/admin/" access="permitAll" />
		<security:intercept-url pattern="/admin/login" access="permitAll" />
		<security:intercept-url pattern="/admin/**/**" access="hasAuthority('admin')" /> -->
	
		<form-login login-page="/admin/login" 
					username-parameter="memId" 
					password-parameter="memPw"
					authentication-success-handler-ref="loginSuccessHandler" 
					authentication-failure-handler-ref="loginFailureHandler"
					login-processing-url="/admin/loginAjax"/>
					
		<logout logout-url="/admin/logout" success-handler-ref="logoutSuccessHandler"/> 
				
		<access-denied-handler ref="customAccessDeniedHandler"/>
	</http>
	
	<http pattern="/user/**" auto-config="true" use-expressions="true"> 

		<!-- <security:csrf disabled="true" />
		<security:intercept-url pattern="/user/" access="permitAll" />
		<security:intercept-url pattern="/user/login" access="permitAll" />
		<security:intercept-url pattern="/user/**/**" access="hasAuthority('user')" /> -->
	
		<form-login login-page="/user/login" 
					username-parameter="memId" 
					password-parameter="memPw"
					authentication-success-handler-ref="loginSuccessHandler" 
					authentication-failure-handler-ref="loginFailureHandler"
					login-processing-url="/user/loginAjax"/>
					
		<logout logout-url="/user/logout" success-handler-ref="logoutSuccessHandler"/> 
				
		<access-denied-handler ref="customAccessDeniedHandler"/>
	</http>  
	
	<authentication-manager> 
		<authentication-provider ref="CustomAuthenticationProvider"/>
	</authentication-manager>
	
	<!--
    provider는 이미 form에서 id 및 pwd(암호화 된값)을 가져오고 db에서 가져온 값을 UserService를 통해  UserDetail을 저장을 하며
    UserDetail은 인증정보(db에서 가져온 사용자 값) 과 권한정보를 
    가져와서 provider는 먼저 인증을 비교한후  true가 되면 권한(Grant Authority)을 부여한다.      
 	-->
    <beans:bean id="CustomAuthenticationProvider" class="com.filproject.common.security.CustomAuthenticationProvider">
        <beans:property name="userDetailsService" ref="customUserService"></beans:property>
        <beans:property name="passwordEncoder" ref="passwordEncoder"></beans:property>
    </beans:bean> 
	
	<beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	<beans:bean id="customUserService" class="com.filproject.common.security.CustomUserDetailService"/>
	<beans:bean id="customAccessDeniedHandler" class="com.filproject.common.security.CustomAccessDeniedHandler"/>
	<beans:bean id="loginSuccessHandler" class="com.filproject.common.security.LoginSuccessHandler"/>
    <beans:bean id="loginFailureHandler" class="com.filproject.common.security.LoginFailureHandler"/>
    <beans:bean id="logoutSuccessHandler" class="com.filproject.common.security.CustomLogoutSuccessHandler"/> 
	
</beans:beans>